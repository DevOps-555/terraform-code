name: 'Apply terraform'

on: 
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment: [test]'
        required: true
      short_environment:
        description: 'Environment: [test]'
        required: true
      module:
        description: 'Modul to apply: [gcp]'
        required: true
      runs_on:
        description: 'Machine where the job should run'
        required: true
      gcp_secret_key:
        description: 'Key for obtaining GCP key from secrets [GCP_KEY]'
        required: true

jobs:
  terraform-apply:
    runs-on: ${{ inputs.module == 'gcp' && 'ubuntu-latest' || fromJSON(inputs.runs_on) }}
    name: Apply terraform ${{ inputs.short_environment }}.${{ inputs.module }}
    steps:
    - uses: actions/checkout@v3

    - name: Echo variables
      shell: bash
      run: |
        echo "ENVIRONMENT: ${{ inputs.environment }}"
        echo "SHORT_ENVIRONMENT: ${{ inputs.short_environment }}"
        echo "RUNS_ON: ${{ inputs.runs_on }}"
        echo "MODULE: ${{ inputs.module }}"
        echo "GCP_SECRET_KEY: ${{ inputs.gcp_secret_key }}"
        echo "GCP_SECRET: ${{ secrets[inputs.gcp_secret_key] }}"
        echo "ESC_ORG_ID=${{ secrets.ORG_ID }}" >> $GITHUB_ENV
        echo "ESC_TOKEN=${{ secrets.HUB_TOKEN }}" >> $GITHUB_ENV
    - name: HashiCorp - Setup Terraform
      uses: hashicorp/setup-terraform@v1.2.1
      with:
        terraform_version: 1.1.9
        terraform_wrapper: false
    
    - name: Extract Project ID
      shell: bash
      run: |
        gcp_project=`cat ./env/${{ inputs.environment }}.tfvars | grep "gcp_project" | sed 's/^[^"]*"\([^"]*\)".*/\1/'`
        echo "Setting Project : $gcp_project"
        echo "GCP_PROJECT_ID=$gcp_project" >> $GITHUB_ENV
    - name: Set up gcloud Cloud SDK environment
      uses: google-github-actions/setup-gcloud@v0
      with:
        version: '411.0.0'
        project_id: ${{ env.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets[inputs.gcp_secret_key] }}
        export_default_credentials: true

    - name: Terraform Init
      shell: bash
      id: init
      working-directory: ./${{ inputs.module }}
      run: terraform init -input=false  -backend-config ../env/${{ inputs.environment }}_${{ inputs.module }}.state.tf
    
    - name: Terraform Apply
      shell: bash
      id: apply
      working-directory: ./${{ inputs.module }}
      run: |
        terraform apply -var-file ../env/${{ inputs.environment }}.tfvars -input=false -lock=false -refresh=true -auto-approve
    - name: Load version
      shell: bash
      run: |
        VER=$(cat version.txt)
        echo "VERSION: $VER"
        echo "VERSION=$VER" >> $GITHUB_ENV
    - uses: actions/checkout@v3
      with:
        ref: deployed-versions
        path: deployed-versions

    - name: Update deployed-versions.json
      uses: jossef/action-set-json-field@v1
      with:
        file: deployed-versions/deployed-versions.json
        field: ${{ inputs.short_environment }}.${{ inputs.module }}
        value: ${{ env.VERSION }}

    - name: Update deployed version info
      run: |
        cd deployed-versions
        
        git config --global user.email "hec@ncr.com"
        git config --global user.name "Github Actions"
                
        git commit -am "Set deployed ${{ inputs.short_environment }}.${{ inputs.module }} to version ${{ env.VERSION }}" || echo "No changes to commit"
        git push